buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.11'
    id 'java'
    id 'application'
    id 'io.gitlab.arturbosch.detekt' version '1.0.0-RC11'
}


group = 'org.study.javalin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

mainClassName = 'org.study.javalin.ApplicationKt'

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    jcenter()
}

sourceSets {
    acceptanceTest {
        compileClasspath += sourceSets.main.output + configurations.testCompile
        runtimeClasspath += output + compileClasspath + configurations.testRuntime
    }
}

configurations {
    acceptanceTestImplementation.extendsFrom testImplementation
    acceptanceTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task acceptanceTest(type: Test) {
    description = 'Executes the acceptance tests'
    group = 'verification'
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    outputs.upToDateWhen {false}
    mustRunAfter test

    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}

check.dependsOn acceptanceTest

dependencies {
    implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.11')
    implementation('org.jetbrains.kotlin:kotlin-reflect')
    implementation('io.javalin:javalin:2.5.0')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+')

    runtimeOnly('org.slf4j:slf4j-simple:1.7.25')

    testImplementation('org.assertj:assertj-core:3.11.0')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.3.1')

    acceptanceTestCompile('com.github.kittinunf.fuel:fuel:1.15.1')
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy {
        acceptanceTest
    }
}

detekt {
    config = files('detekt-config.yml')
    reports {
        html {
            enabled = true
            destination = file('build/reports/detekt/detekt.html')
        }

        xml {
            enabled = false
        }
    }
}